import{_ as d,M as p,p as u,q as k,R as n,t as s,N as a,V as e,a1 as l}from"./framework-125c10c9.js";const m="/assets/env-348d9e89.png",v={},b=n("h1",{id:"如何添加物料到编辑器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何添加物料到编辑器","aria-hidden":"true"},"#"),s(" 如何添加物料到编辑器")],-1),h=n("h2",{id:"_0-环境准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-环境准备","aria-hidden":"true"},"#"),s(" 0. 环境准备")],-1),g=n("br",null,null,-1),_=n("br",null,null,-1),f=n("img",{src:m,alt:""},null,-1),y={href:"https://git.ifengidc.com/whale/lowcode/fda_editor",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"yarn",-1),E=n("strong",null,"library",-1),w={href:"https://git.ifengidc.com/whale/lowcode/library/basic",target:"_blank",rel:"noopener noreferrer"},B={href:"https://git.ifengidc.com/whale/lowcode/library/business",target:"_blank",rel:"noopener noreferrer"},A={href:"https://git.ifengidc.com/whale/lowcode/library/basic_m",target:"_blank",rel:"noopener noreferrer"},T=n("br",null,null,-1),F=n("code",null,"yarn",-1),C=l(`<h2 id="_1-启动项目" tabindex="-1"><a class="header-anchor" href="#_1-启动项目" aria-hidden="true">#</a> 1. 启动项目</h2><p>fda_editor:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>物料库:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 作用是把组件动态注入到 fda_editor，这样就可以本地开发调试组件，而不用发布</span>
<span class="token function">npm</span> run lowcode:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-打开编辑器页面" tabindex="-1"><a class="header-anchor" href="#_2-打开编辑器页面" aria-hidden="true">#</a> 2. 打开编辑器页面</h2><p>fda_editor 启动后会启用 <code>5556</code> 端口，所以默认的页面地址就是 <code>http://localhost:5556/</code> 。<br> 但是：</p>`,7),P=n("li",null,[s("我们要使用 "),n("strong",null,"ucms"),s(" 的接口去查询碎片，所以要把域名换成 "),n("code",null,"platform.ifeng.com"),s("，"),n("em",null,"此处默认已绑定 host"),s("；")],-1),D=n("li",null,[s("插入浏览器参数 "),n("code",null,"?debug"),s("，来打通 basic 和 fda_editor 的连接；")],-1),M={href:"https://git.ifengidc.com/whale/lowcode/fda_pages",target:"_blank",rel:"noopener noreferrer"},N=l(`<ul><li>点开组件列表，会发现组件会重复了两次。这是因为我们开启了 <code>?debug</code>，编辑器本身的组件列表 + basic 动态注入的列表就是两份。</li><li>新增 <code>?debug=only</code>，纯开发模式，只显示本地注入的组件，不请求远程组件。</li></ul><h2 id="_3-添加新组件" tabindex="-1"><a class="header-anchor" href="#_3-添加新组件" aria-hidden="true">#</a> 3. 添加新组件</h2><p>假如我们要在<code>basic</code>里添加一个新的组件，叫做 <strong>FirstTest</strong>。</p><h4 id="_3-1-编写组件代码" tabindex="-1"><a class="header-anchor" href="#_3-1-编写组件代码" aria-hidden="true">#</a> 3.1 编写组件代码</h4><p>首先需要在 <code>basic/src/components</code> 里新建一个目录，叫做 FirstTest，FirstTest 里至少需要组件的具体业务内容（<code>FirstTest.tsx</code>），以及一个负责导出的 <code>index.tsx</code>。<br> 当然也可以添加样式文件 <code>index.module.scss</code>、工具函数等等，非常自由。<br> 注意 <code>FirstTest.tsx</code> 里也要导出其 interface，用于生成 lowcode 描述文件。</p><p>负责导出的<code>index.tsx</code>的结构是这样的，基本不会变：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> FirstTest <span class="token keyword">from</span> <span class="token string">&#39;./FirstTest&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> FirstTestProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./FirstTest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> FirstTest<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> FirstTest <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-放入项目入口" tabindex="-1"><a class="header-anchor" href="#_3-2-放入项目入口" aria-hidden="true">#</a> 3.2 放入项目入口</h4><p>写完组件之后，我们需要在项目入口<code>basic/src/index.tsx</code>中引用它，引用的方式大致是这样的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> FirstTest_Props <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/FirstTest&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> FirstTest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/FirstTest&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-生成描述文件" tabindex="-1"><a class="header-anchor" href="#_3-3-生成描述文件" aria-hidden="true">#</a> 3.3 生成描述文件</h4><p>停止 basic 项目，再次 <code>npm run lowcode:dev</code>，会发现 <code>basic/lowcode</code> 下多出一个 <code>FirstTest/meta.ts</code>，这个文件就是低代码组件的描述文件。<br> 需要我们修改的有：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    componentName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 组件名称，必须唯一</span>
    category<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 组件分类，相同分类的组件在列表中会放置在一起</span>
    title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">,</span> <span class="token comment">// 组件的中文标题</span>
    screenshot<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 组件图片，可以找图标，也可以找现成的实例截图</span>
    icon<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 组件在大纲树里的小图标</span>
    configure<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 组件的 props 具体配置，可以参考之前的例子，也可以查看 ali 的协议文档，https://lowcode-engine.cn/material#2224-%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C%E5%A2%9E%E5%BC%BA-configure</span>
    <span class="token comment">// 以下是我们的自定义字段，不在官方的协议内</span>
    
    <span class="token doc-comment comment">/**
     * 组件图片预览时的尺寸，目前有以下几种：
     * 1. long，长图，600*150
     * 2. tall，高图，280*500
     * 2. noPreview，不允许预览，此时预览图标半透明
     * 3. 什么都不写，默认 450*260
     * */</span> 
    screenshotSize<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;long&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;tall&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;noPreview&#39;</span><span class="token punctuation">,</span>
    sort<span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 在用户筛选 category 时的排序优先级，越小越靠前。不写则不参与排序，按字符串顺序排。</span>
    hide<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 是否隐藏，不出现在组件库里，默认不隐藏。在测试某组件的时候可能才会需要。</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中最重要的就是 <code>configure</code>，也就是 props 的配置项。 一般情况下 props 的配置项是这样的：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> FirstTestMeta <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    configure<span class="token operator">:</span> <span class="token punctuation">{</span>
        props<span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token comment">// 一般结构都是这样的，看官方文档会更加方便，我就不复制了</span>
            <span class="token comment">// https://lowcode-engine.cn/material#2224-%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C%E5%A2%9E%E5%BC%BA-configure</span>
            <span class="token punctuation">{</span>
                name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                title<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                display<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                setter<span class="token operator">:</span> <span class="token punctuation">{</span>
                    componentName<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                    props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                    initialValue<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是有些 props 形式比较固定，泛用性又比较强，所以我们封装了一些方法，有需要的时候直接引用即可：</p>`,16),j=n("thead",null,[n("tr",null,[n("th",null,"方法名"),n("th",null,"功能")])],-1),R=n("td",null,"封装碎片的 meta 信息，组件里有碎片就应该用它",-1),S=n("td",null,[s("封装样式设置器的 meta 信息，如果组件里有"),n("strong",null,"单独为某个区域"),s("设置样式的 props，比如"),n("code",null,"titleStyle"),s("、"),n("code",null,"imageStyle"),s("之类的，用它")],-1),V=n("td",null,'如果某个组件，我们给它预设了一套配置项便于用户选择，那么这套配置项就叫"皮肤"',-1),z=n("td",null,"组件内图片如果需要设置是否裁图，使用这个方法",-1),I=n("span",{style:{color:"#ff4b4b","font-size":"12px"}},"仅移动端",-1),L=n("td",null,[s("普通的"),n("code",null,"px"),s("转"),n("code",null,"rem")],-1),O=n("span",{style:{color:"#ff4b4b","font-size":"12px"}},"仅移动端",-1),q=n("td",null,[s("在样式里的"),n("code",null,"px"),s("转"),n("code",null,"rem")],-1),G=l(`<h2 id="_4-开发调试" tabindex="-1"><a class="header-anchor" href="#_4-开发调试" aria-hidden="true">#</a> 4. 开发调试</h2><p>上述步骤之后，就不再需要重启，可以随意改动组件文件和 <code>meta.ts</code>，修改之后刷新浏览器页面即可生效（需等待basic热更新生效，一小会）。</p><p>接下来就是组件内的编写了。<br> 每个组件我们都注入了一个 <code>style</code> props，用于设置组件最外层容器的样式。你应该这样使用它：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">FirstTest</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment">// 也可以直接使用 style={props.style}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">.</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span><span class="token comment">/*组件内容...*/</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于移动端，由于要涉及 pxtorem，所以稍微有点麻烦。下面是我推荐的写法：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TitleProps</span> <span class="token punctuation">{</span>
    style<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> rem<span class="token operator">:</span> object <span class="token punctuation">}</span> <span class="token comment">// style 本来是质朴的 object，现在多了一层 rem</span>
    width<span class="token operator">:</span> <span class="token punctuation">{</span> rem<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token comment">// 这种很明显是 Number 类型的，不再是了。</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">FirstTest</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * 这里是最佳实践后的写法
     * 
     * 1. props 的变量名不变，便于理解和复制
     * 2. style 要带默认值，要不然会报错
     * */</span> 
    <span class="token keyword">const</span> <span class="token punctuation">{</span>
        style<span class="token operator">:</span> <span class="token punctuation">{</span> rem<span class="token operator">:</span> style <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> rem<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        width<span class="token operator">:</span> <span class="token punctuation">{</span> rem<span class="token operator">:</span> width <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> props
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment">// 也可以直接使用 style={props.style}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">,</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span><span class="token comment">/*组件内容...*/</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是所有的必须要做的事情。<br> 接下来是对写代码很有用，但是不一定用得到的，可按需查阅：</p>`,7),H=n("h2",{id:"_5-发版",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-发版","aria-hidden":"true"},"#"),s(" 5. 发版")],-1),J={href:"https://ucms.ifeng.com/platform/shankconf/shankconfApi/gitlab/groups/1182",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,[n("strong",null,"注意：")],-1),Q=n("ul",null,[n("li",null,[s("使用 "),n("code",null,"npm 版本")]),n("li",null,[s("使用 "),n("code",null,"生成自定义tag，并更新package.json的version字段")])],-1),U=n("p",null,[s("CI/CD 成功之后，默认激活新版本，可以使用去掉 "),n("code",null,"?debug"),s(" 的链接来测试是否发版成功。")],-1);function W(X,Y){const o=p("ExternalLinkIcon"),c=p("a-tag"),r=p("Copy"),t=p("RouterLink"),i=p("mobile-outlined");return u(),k("div",null,[b,h,n("p",null,[s('第一次准备环境可能比较麻烦，之后再开发就比较"便捷"了~'),g,s(" 感受一下："),_,f,s(" 首先需要克隆 "),n("a",y,[s("fda_editor"),a(o)]),s("，执行"),x,s("安装依赖，可能会安装失败，多试几次就行。")]),n("p",null,[s("然后在 fda_editor 的根目录中创建一个 "),E,s(" 文件夹，然后在 library 里克隆 "),n("a",w,[s("basic"),a(o)]),s("、 "),n("a",B,[s("business"),a(o)]),s(" 或 "),n("a",A,[s("basic_m"),a(o)]),s("，取决于想开发哪个物料库。"),T,s(" 克隆完毕后使用"),F,s("安装依赖。")]),C,n("ol",null,[P,D,n("li",null,[s("需要一个页面的 id，来获取、保存 schema，可以使用 "),n("a",M,[s("fda_pages"),a(o)]),s(" 查询或者创建，想省劲也可以找 "),a(c,{color:"blue"},{default:e(()=>[s("@lihu3")]),_:1}),s("要id。")])]),n("p",null,[s("所以最终的链接就是 "),a(r,null,{default:e(()=>[s("http://platform.ifeng.com:5556/?debug&id=1")]),_:1}),s("，id 要换成自己的。")]),N,n("table",null,[j,n("tbody",null,[n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#getmeta-chip"},{default:e(()=>[s("getMeta_chip")]),_:1})]),R]),n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#getmeta-style"},{default:e(()=>[s("getMeta_style")]),_:1})]),S]),n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#getmeta-skin"},{default:e(()=>[s("getMeta_skin")]),_:1})]),V]),n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#getMeta_FormatImageType"},{default:e(()=>[s("getMeta_FormatImageType")]),_:1})]),z]),n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#pxToPxRemObj"},{default:e(()=>[s("pxToPxRemObj")]),_:1}),a(i,{style:{color:"#ff4b4b","font-size":"16px","margin-left":"10px"}}),I]),L]),n("tr",null,[n("td",null,[a(t,{to:"/pages/material/optional.html#styleToPxRemStyle"},{default:e(()=>[s("styleToPxRemStyle")]),_:1}),a(i,{style:{color:"#ff4b4b","font-size":"16px","margin-left":"10px"}}),O]),q])])]),G,n("ul",null,[n("li",null,[a(t,{to:"/pages/material/optional.html#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%A2%8E%E7%89%87"},{default:e(()=>[s("如何使用碎片")]),_:1})]),n("li",null,[a(t,{to:"/pages/material/optional.html#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E7%BC%96%E8%BE%91%E6%80%81%E5%92%8C%E6%B8%B2%E6%9F%93%E6%80%81"},{default:e(()=>[s("如何区分编辑态和渲染态")]),_:1})]),n("li",null,[a(t,{to:"/pages/material/optional.html#%E9%80%9A%E7%94%A8%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6"},{default:e(()=>[s("通用图片组件")]),_:1})]),n("li",null,[a(t,{to:"/pages/material/optional.html#%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0-hover-%E6%A0%B7%E5%BC%8F"},{default:e(()=>[s("如何添加 hover 样式")]),_:1})]),n("li",null,[a(t,{to:"/pages/material/optional.html#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%861px"},{default:e(()=>[s("移动端如何处理1px")]),_:1})])]),H,n("p",null,[s("开发完毕之后，git 提交所有的修改，然后使用 "),n("a",J,[s("tag 工具"),a(o)]),s("打 tag。")]),K,Q,U])}const $=d(v,[["render",W],["__file","howToAdd.html.vue"]]);export{$ as default};
