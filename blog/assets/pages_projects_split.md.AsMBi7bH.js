import{_ as r,V as s,c as l,f as t,E as d,b as e,ao as o,o as i}from"./chunks/framework.IeBF7J3I.js";const y=JSON.parse('{"title":"设计图裁剪工具 - split","description":"","frontmatter":{},"headers":[],"relativePath":"pages/projects/split.md","filePath":"pages/projects/split.md","lastUpdated":1701308594000}'),n={name:"pages/projects/split.md"},c=e("h1",{id:"设计图裁剪工具-split",tabindex:"-1"},[t("设计图裁剪工具 - split "),e("a",{class:"header-anchor",href:"#设计图裁剪工具-split","aria-label":'Permalink to "设计图裁剪工具 - split"'},"​")],-1),_=e("p",null,[e("strong",null,"精心制作的玩具项目。"),t(),e("a",{href:"https://github.com/ImSwordTooth/split",target:"_blank",rel:"noreferrer"},"github 地址"),t("。")],-1),p=e("p",null,[t("以设计图为背景，在上层手动绘制出矩形，矩形可嵌套。矩形就是组件的抽象，矩形的嵌套关系就是组件的嵌套关系。"),e("br"),t(`
每个组件还可以设置`),e("code",null,"propTypes"),t("、预引入的组件、埋点信息、碎片等。"),e("br"),t(`
设置完毕后可生成为本地文件，直接初始化一个具备完整结构的`),e("code",null,"React"),t("或"),e("code",null,"Vue"),t(`项目。
`),e("img",{src:"https://i0.letvimg.com/lc15_lemf/202311/28/10/32/Snipaste_2023-11-28_10-17-50.png",alt:""})],-1),h=e("h3",{id:"技术栈",tabindex:"-1"},[t("技术栈 "),e("a",{class:"header-anchor",href:"#技术栈","aria-label":'Permalink to "技术栈"'},"​")],-1),m=o('<table tabindex="0"><thead><tr><th>类型</th> <th>说明</th></tr></thead> <tbody><tr><td>框架</td> <td>React（Class写法，为了兼容 <code>pixi.js</code>）</td></tr> <tr><td>CSS</td> <td><a href="https://styled-components.com/" target="_blank" rel="noreferrer">styled-components</a></td></tr> <tr><td>构建工具</td> <td>webpack</td></tr> <tr><td>重要依赖</td> <td><a href="https://pixijs.com/" target="_blank" rel="noreferrer">pixi.js</a></td></tr></tbody></table>',1),b=e("h3",{id:"画布部分",tabindex:"-1"},[t("画布部分 "),e("a",{class:"header-anchor",href:"#画布部分","aria-label":'Permalink to "画布部分"'},"​")],-1),u=e("p",null,[t("画布是本项目最重要核心的部分，由 2D WebGL 渲染引擎"),e("code",null,"pixi.js"),t("完成。"),e("br"),t(`
虽说是用了第三方库，但是图形绘制和操作的逻辑也没有很少。`)],-1),f=e("h4",{id:"绘制矩形",tabindex:"-1"},[t("绘制矩形 "),e("a",{class:"header-anchor",href:"#绘制矩形","aria-label":'Permalink to "绘制矩形"'},"​")],-1),T=e("p",null,"绘制矩形时要考虑以下情况：",-1),x=o('<ul><li>从上往下从左往右只是一般情况，很有可能是反向绘制</li> <li>鼠标按下时进行<code>hittest</code>，如果没有命中，就在最外层容器绘制，如果命中，就在命中的矩形里绘制，形成嵌套关系</li> <li>每次绘制时重新生成一个随机色，如果是嵌套的矩形，就使用父矩形的系列颜色的随机色（使用了<a href="https://www.npmjs.com/package/randomcolor" target="_blank" rel="noreferrer">randomcolor</a>）</li> <li>画布可能被手动移动、缩放等</li> <li>如果只移动了很短的距离，不会创建</li></ul>',1),g=e("h4",{id:"绘制与操作顶点",tabindex:"-1"},[t("绘制与操作顶点 "),e("a",{class:"header-anchor",href:"#绘制与操作顶点","aria-label":'Permalink to "绘制与操作顶点"'},"​")],-1),k=o(`<p>选中矩形时，根据矩形顶点绘制出四个圆形。<br>
每个圆形都添加<code>mousedown</code>、<code>mouseover</code>、<code>mouseup</code>事件以控制矩形的尺寸。<br> <code>mouseover</code>时实时修改矩形尺寸，<code>x</code> 和 <code>y</code> 值最小的为矩形左上角，取其对角点，可获取矩形宽度和高度。</p>`,1);function S(P,V,A,C,j,N){const a=s("Outlink");return i(),l("div",null,[c,t(),_,t(),d(a,{url:"https://imswordtooth.github.io/split",text:"点我去体验",style:{"font-size":"32px"}}),p,t(),h,t(),m,t(),b,t(),u,t(),f,t(),T,t(),x,t(),g,t(),k])}const I=r(n,[["render",S]]);export{y as __pageData,I as default};
