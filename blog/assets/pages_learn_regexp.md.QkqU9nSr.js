import{_ as h,V as d,c as o,f as s,b as t,E as i,X as n,ao as e,o as r}from"./chunks/framework.IeBF7J3I.js";const yt=JSON.parse('{"title":"正则","description":"","frontmatter":{},"headers":[],"relativePath":"pages/learn/regexp.md","filePath":"pages/learn/regexp.md","lastUpdated":1719231919000}'),p={name:"pages/learn/regexp.md"},c=t("h1",{id:"正则",tabindex:"-1"},[s("正则 "),t("a",{class:"header-anchor",href:"#正则","aria-label":'Permalink to "正则"'},"​")],-1),k=t("h2",{id:"标志-flag",tabindex:"-1"},[s("标志 flag "),t("a",{class:"header-anchor",href:"#标志-flag","aria-label":'Permalink to "标志 flag"'},"​")],-1),_=e(`<p>描述正则表达式匹配的整体规则。<br>
如果是字面量正则，直接附在后面即可，如<code>/abc/g</code>，如果是用构造函数声明，则放在构造函数的第二个参数里，如<code>new RegExp(&#39;abc&#39;, &#39;g&#39;)</code>。<br>
可以并行使用，比如<code>/abc/igm</code>。<br>
可以使用<code>RegExp.prototype.flags</code>获取某字符串的标志，返回一个字符串。</p>`,1),g=t("h3",{id:"g-全局匹配",tabindex:"-1"},[s("g 全局匹配 "),t("a",{class:"header-anchor",href:"#g-全局匹配","aria-label":'Permalink to "g 全局匹配"'},"​")],-1),u=t("p",null,[t("strong",null,"global"),s("，找到所有的匹配，而不是在第一个匹配之后停止。")],-1),b=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>abcdabc</th></tr></thead> <tbody><tr><td><code>/abc/</code></td> <td><code>res.index</code>一直是<code>0</code></td></tr> <tr><td><code>/abc/g</code></td> <td><code>res.index</code>为<code>0</code>，然后是<code>4</code>，最终<code>res</code>为<code>null</code>，循环此结果</td></tr></tbody></table>',1),F=t("h3",{id:"i-忽略大小写",tabindex:"-1"},[s("i 忽略大小写 "),t("a",{class:"header-anchor",href:"#i-忽略大小写","aria-label":'Permalink to "i 忽略大小写"'},"​")],-1),y=t("p",null,[t("strong",null,"ignoreCase"),s("，匹配时忽略大小写。")],-1),E=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>aBc</th></tr></thead> <tbody><tr><td><code>/abc/</code></td> <td><code>null</code></td></tr> <tr><td><code>/abc/i</code></td> <td><code>[&#39;aBc&#39;, index: 0, input: &#39;aBc&#39;, groups: undefined]</code></td></tr></tbody></table>',1),A=t("h3",{id:"m-多行匹配",tabindex:"-1"},[s("m 多行匹配 "),t("a",{class:"header-anchor",href:"#m-多行匹配","aria-label":'Permalink to "m 多行匹配"'},"​")],-1),D=t("p",null,[t("strong",null,"multiline"),s("，一个多行输入字符串被看做多行。"),t("br"),s(`
例如，使用了`),t("code",null,"m"),s("标志"),t("code",null,"^"),s("和"),t("code",null,"$"),s("将会从“只匹配字符串的开头或结果”，变为“匹配字符串中任一行的开头或结尾”。")],-1),C=e('<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `abc</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ab`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table tabindex="0"><thead><tr><th>测试结果</th> <th><code>str1</code></th></tr></thead> <tbody><tr><td><code>/^a/g</code></td> <td><code>res.index</code>先为<code>0</code>，再次调用则<code>res</code>为<code>null</code>，循环此结果</td></tr> <tr><td><code>/^a/mg</code></td> <td><code>res.index</code>为<code>0</code>，然后是<code>4</code>，最终<code>res</code>为<code>null</code>，循环此结果</td></tr></tbody></table>',2),T=t("h3",{id:"s-点号匹配所有字符",tabindex:"-1"},[s("s 点号匹配所有字符 "),t("a",{class:"header-anchor",href:"#s-点号匹配所有字符","aria-label":'Permalink to "s 点号匹配所有字符"'},"​")],-1),m=t("p",null,[t("code",null,"."),s(" 匹配除换行符外的任意字符，如果开启该标志，它也会匹配换行符，见"),t("a",{href:"#匹配换行符外的任意字符"},". - 匹配换行符外的任意字符"),s("。")],-1),x=t("h3",{id:"其他",tabindex:"-1"},[s("其他 "),t("a",{class:"header-anchor",href:"#其他","aria-label":'Permalink to "其他"'},"​")],-1),B=t("p",null,[s("还有其他的 "),t("code",null,"flag"),s("，但是用途比较少，用到的时候再总结吧，有："),t("code",null,"u"),s("(unicode)、"),t("code",null,"y"),s("(sticky，粘性匹配)。")],-1),f=t("h2",{id:"元字符",tabindex:"-1"},[s("元字符 "),t("a",{class:"header-anchor",href:"#元字符","aria-label":'Permalink to "元字符"'},"​")],-1),S=t("p",null,[s("正则表达式规定的特殊代码，类似于关键字。"),t("br"),s(`
这里只列出常用的元字符，许多不常用的诸如`),t("code",null,"\\a"),s("(报警字符)、"),t("code",null,"\\f"),s("(换页符)、"),t("code",null,"\\e"),s("(Escape) 等就不列出来了，后续有觉得有用的再补充。")],-1),P=t("h3",{id:"匹配字符串的开头",tabindex:"-1"},[s("^ 匹配字符串的开头 "),t("a",{class:"header-anchor",href:"#匹配字符串的开头","aria-label":'Permalink to "^ 匹配字符串的开头"'},"​")],-1),q=t("p",null,[s("除了匹配字符串的开头，还有反向匹配的用法"),t("code",null,"[^]"),s("，见下文。")],-1),v=t("h3",{id:"匹配字符串的结尾",tabindex:"-1"},[s("$ 匹配字符串的结尾 "),t("a",{class:"header-anchor",href:"#匹配字符串的结尾","aria-label":'Permalink to "$ 匹配字符串的结尾"'},"​")],-1),V=t("p",null,"匹配字符串的结尾。",-1),I=t("h3",{id:"匹配换行符外的任意字符",tabindex:"-1"},[s(". 匹配换行符外的任意字符 "),t("a",{class:"header-anchor",href:"#匹配换行符外的任意字符","aria-label":'Permalink to ". 匹配换行符外的任意字符"'},"​")],-1),N=t("p",null,[s("换行符指 "),t("code",null,"\\n"),s("，如果正则字符串的标志里有 "),t("code",null,"s"),s("(点号匹配所有字符)，它也会匹配换行符。")],-1),R=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a^&amp;˙˚sd©ß∂å≈åß∂∆åø$b%c^&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`a$b%c^</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ab\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><table tabindex="0"><thead><tr><th>测试结果</th> <th><code>str1</code></th> <th><code>str2</code></th> <th><code>str3</code></th> <th><code>str4</code></th></tr></thead> <tbody><tr><td><code>/^.+$/g</code></td> <td><code>true</code></td> <td><code>false</code></td> <td><code>true</code></td> <td><code>true</code></td></tr> <tr><td><code>/^.+$/gs</code></td> <td><code>true</code></td> <td><code>true</code></td> <td><code>true</code></td> <td><code>true</code></td></tr></tbody></table>`,2),w=t("h3",{id:"d-匹配数字",tabindex:"-1"},[s("\\d 匹配数字 "),t("a",{class:"header-anchor",href:"#d-匹配数字","aria-label":'Permalink to "\\d 匹配数字"'},"​")],-1),$=t("p",null,[t("strong",null,"digit"),s("，等同于"),t("code",null,"[0-9]"),s("，只匹配"),t("code",null,"0123456789"),s("这10个字符。")],-1),j=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>1998</th> <th>19.98</th> <th>1e+2</th></tr></thead> <tbody><tr><td><code>/^\\d+$/</code></td> <td><code>true</code></td> <td><code>false</code>，小数不行</td> <td><code>false</code>，科学计数法也不行</td></tr></tbody></table>',1),L=t("h3",{id:"w-匹配字母、数字、下划线",tabindex:"-1"},[s("\\w - 匹配字母、数字、下划线 "),t("a",{class:"header-anchor",href:"#w-匹配字母、数字、下划线","aria-label":'Permalink to "\\w - 匹配字母、数字、下划线"'},"​")],-1),z=t("p",null,[t("strong",null,"word"),s("，等同于"),t("code",null,"[A-Za-z0-9_]"),s("。"),t("strong",null,[s("强调一下，"),t("code",null,"\\w"),s(" 也匹配数字！")])],-1),W=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>hello</th> <th>hel_lo</th> <th>hello2</th> <th>你好</th> <th>enchanté</th></tr></thead> <tbody><tr><td><code>/^\\w+$/</code></td> <td><code>true</code></td> <td><code>true</code></td> <td><code>true</code></td> <td><code>false</code>，汉语不行</td> <td><code>false</code>，有些语言里带注音？的英文也不行</td></tr></tbody></table>',1),U=t("h3",{id:"s-匹配任意空白符",tabindex:"-1"},[s("\\s 匹配任意空白符 "),t("a",{class:"header-anchor",href:"#s-匹配任意空白符","aria-label":'Permalink to "\\s 匹配任意空白符"'},"​")],-1),J=t("p",null,[t("strong",null,"space"),s("，匹配一个空白字符，包含空格、制表符、换页符和换行符，等价于"),t("code",null,"[\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]"),s("。")],-1),G=t("p",null,"基本包含了所有的空白符了，测试用例也不好写，不测了。",-1),O=t("h3",{id:"b-匹配单词的开始或结束",tabindex:"-1"},[s("\\b 匹配单词的开始或结束 "),t("a",{class:"header-anchor",href:"#b-匹配单词的开始或结束","aria-label":'Permalink to "\\b 匹配单词的开始或结束"'},"​")],-1),X=t("p",null,[t("strong",null,"border"),s("，匹配一个词的边界，比如在字母和空格之间。"),t("br"),s(`
匹配中不包括边界，也就是说，一个匹配的词的边界内容长度为 0。`)],-1),Z=t("blockquote",null,[t("p",null,`JavaScript 的正则表达式引擎将特定的字符集定义为“字”字符。
不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。
不幸的是，重要的字符，例如“é”或“ü”，被视为断词。`)],-1),H=t("p",null,[s("以上是 "),t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_expressions",target:"_blank",rel:"noreferrer"},"mdn 的注释"),s("，我理解的意思是，"),t("code",null,"\\b"),s(" 所谓的”单词“，并不满足所有的语言系统。")],-1),K=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>something</th> <th>some thing</th> <th>some_thing</th> <th>some-thing</th> <th>some/thing</th> <th>sométhing</th></tr></thead> <tbody><tr><td><code>/\\bt/</code></td> <td><code>null</code></td> <td><code>res.index</code>为<code>5</code></td> <td><code>null</code>, 下划线算是单词的一部分</td> <td><code>res.index</code>为<code>5</code>，短横杠可以</td> <td><code>res.index</code>为<code>5</code>，斜杠可以</td> <td><code>res.index</code>为<code>4</code>，这里匹配到了，所以对于某些语言来说，“边界”真的不好定</td></tr></tbody></table>',1),M=t("h2",{id:"量词",tabindex:"-1"},[s("量词 "),t("a",{class:"header-anchor",href:"#量词","aria-label":'Permalink to "量词"'},"​")],-1),Q=t("p",null,"量词表示要匹配的字符或表达式的数量。",-1),Y=t("h3",{id:"匹配-0-次或多次",tabindex:"-1"},[s("* 匹配 0 次或多次 "),t("a",{class:"header-anchor",href:"#匹配-0-次或多次","aria-label":'Permalink to "* 匹配 0 次或多次"'},"​")],-1),ss=t("h3",{id:"匹配-1-次或多次",tabindex:"-1"},[s("+ 匹配 1 次或多次 "),t("a",{class:"header-anchor",href:"#匹配-1-次或多次","aria-label":'Permalink to "+ 匹配 1 次或多次"'},"​")],-1),ts=t("h3",{id:"n-匹配-n-次",tabindex:"-1"},[s("{n} 匹配 n 次 "),t("a",{class:"header-anchor",href:"#n-匹配-n-次","aria-label":'Permalink to "{n} 匹配 n 次"'},"​")],-1),es=t("h3",{id:"n-至少匹配-n-次",tabindex:"-1"},[s("{n,} 至少匹配 n 次 "),t("a",{class:"header-anchor",href:"#n-至少匹配-n-次","aria-label":'Permalink to "{n,} 至少匹配 n 次"'},"​")],-1),is=t("h3",{id:"n-m-匹配-n-m-次",tabindex:"-1"},[s("{n,m} 匹配 n ~ m 次 "),t("a",{class:"header-anchor",href:"#n-m-匹配-n-m-次","aria-label":'Permalink to "{n,m} 匹配 n ~ m 次"'},"​")],-1),as=t("br",null,null,-1),ns=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>goooogle</th></tr></thead> <tbody><tr><td><code>/(o*)/g</code></td> <td><code>res.index</code>为<code>0</code>，<code>res[0]</code>为<code>空字符串</code>，因为没匹配到字符，继续执行<code>exec()</code>也不会继续往后搜索。手动设置正则的<code>lastIndex</code>为<code>1</code>后，可以继续执行。</td></tr> <tr><td><code>/(o+)/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>oooo</code>，继续执行，<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{2})/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>oo</code>，继续执行，<code>res.index</code>为<code>3</code>，然后<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{3})/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>ooo</code>，继续执行，<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{4})/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>oooo</code>，继续执行，<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{5})/g</code></td> <td><code>null</code></td></tr> <tr><td><code>/(o{3,})/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>oooo</code>，继续执行，<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{5,})/g</code></td> <td><code>null</code></td></tr> <tr><td><code>/(o{2,5})/g</code></td> <td><code>res.index</code>为<code>1</code>，<code>res[0]</code>为<code>oooo</code>，继续执行，<code>res</code>为 <code>null</code>，循环此结果</td></tr> <tr><td><code>/(o{3,3})/g</code></td> <td>等同于<code>/(o{3})/g</code></td></tr> <tr><td><code>/(o{4,4})/g</code></td> <td>等同于<code>/(o{4})/g</code></td></tr> <tr><td><code>/(o{4,3})/g</code></td> <td>n &gt; m，直接报错，<code>Uncaught SyntaxError: Invalid regular expression: /o{4,3}/g: numbers out of order in {} quantifier</code></td></tr></tbody></table>',1),ds=t("h3",{id:"懒惰匹配",tabindex:"-1"},[s("? 懒惰匹配 "),t("a",{class:"header-anchor",href:"#懒惰匹配","aria-label":'Permalink to "? 懒惰匹配"'},"​")],-1),ls=t("p",null,[s("量词默认是贪婪的，也就是"),t("strong",null,"尽可能找到更多的匹配"),s("。"),t("br"),s(`
有时候我们需要`),t("strong",null,"懒惰匹配"),s("，也就是"),t("strong",null,"尽可能找到更少的匹配"),s("，只需要在上述量词后面加一个"),t("code",null,"?"),s("。")],-1),hs=e("<ul><li>*<strong>?</strong> 重复任意次，但尽可能少重复</li> <li><strong>+?</strong> 重复1次或更多次，但尽可能少重复</li> <li><strong>??</strong> 重复0次或1次，但尽可能少重复，实际上跟单个<code>?</code>一样</li> <li><strong>{n,m}?</strong> 重复n到m次，但尽可能少重复</li> <li><strong>{n,}?</strong>	重复n次以上，但尽可能少重复</li></ul>",1),os=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>aabab</th></tr></thead> <tbody><tr><td><code>/a.*b/</code></td> <td><code>res[0]</code>为<code>aabab</code>，找到了尽可能长的匹配项</td></tr> <tr><td><code>/a.*?b/</code></td> <td><code>res[0]</code>为<code>aab</code>，到这里就满足要求了，不再继续，懒惰</td></tr></tbody></table>',1),rs=t("h2",{id:"分支条件",tabindex:"-1"},[s("分支条件 "),t("a",{class:"header-anchor",href:"#分支条件","aria-label":'Permalink to "分支条件"'},"​")],-1),ps=t("h3",{id:"字符集",tabindex:"-1"},[s("[] 字符集 "),t("a",{class:"header-anchor",href:"#字符集","aria-label":'Permalink to "[] 字符集"'},"​")],-1),cs=t("p",null,[s("我们也可以用"),t("code",null,"[]"),s("轻松指定一个字符范围，只需要在方括号里列出它们，比如"),t("code",null,"[aeiou]"),s("匹配任何一个英文元音字母，"),t("code",null,"[.?!]"),s("匹配标点符号(.或?或!)。"),t("br"),s(`
可以使用连字符`),t("code",null,"-"),s("来指定字符范围，但如果连字符用的不规范会被当做普通"),t("code",null,"-"),s("处理。")],-1),ks=e("<p><code>[]</code>中的特殊字符不用加上反斜杠<code>\\</code>转义，除非想在<code>[]</code>中列出和<code>]</code>，<code>[</code>也可以不加转义符。<br> <strong>关于<code>[]</code>里匹配<code>\\</code>，很疑惑。比如我想匹配 <code>\\a</code> 这个字符串，写<code>[\\]a</code>会被认为<code>\\]</code>为一组，没有闭合的中括号，直接报错；写<code>[\\\\]a</code>则被认为是两个连续的<code>\\</code>，只能匹配<code>\\\\a</code>。没搞懂，因此下面示例中不再测试<code>[]</code>里带<code>\\</code>的情况。</strong></p>",1),_s=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>openAi</th> <th>open.i</th> <th>open[i</th> <th>open]i</th></tr></thead> <tbody><tr><td><code>/open[AB.]i/</code></td> <td><code>res[0]</code>为<code>openAi</code></td> <td><code>res[0]</code>为<code>open.i</code></td> <td><code>null</code></td> <td><code>null</code></td></tr> <tr><td><code>/open[AB.\\[]]i/</code></td> <td><code>null</code>，这里<code>\\[</code>被当做<code>[</code>，后面的<code>]</code>把中括号闭合了，再后面的<code>]</code>被当做普通字符，匹配不到<code>]i</code>，所以失败</td> <td><code>null</code></td> <td><code>null</code></td> <td><code>null</code></td></tr> <tr><td><code>/open[AB.[]i/</code></td> <td><code>res[0]</code>为<code>openAi</code></td> <td><code>res[0]</code>为<code>open.i</code></td> <td><code>res[0]</code>为<code>open[i</code>，中括号里的<code>[</code>不用加转义符</td> <td><code>null</code></td></tr> <tr><td><code>/open[AB.[\\]]i/</code></td> <td><code>res[0]</code>为<code>openAi</code></td> <td><code>res[0]</code>为<code>open.i</code></td> <td><code>res[0]</code>为<code>open[i</code></td> <td><code>res[0]</code>为<code>open]i</code></td></tr></tbody></table>',1),gs=t("br",null,null,-1),us=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>openb</th> <th>opend</th> <th>open-</th></tr></thead> <tbody><tr><td><code>/open[a-c]/</code></td> <td><code>true</code></td> <td><code>false</code></td> <td><code>false</code></td></tr> <tr><td><code>/open[a-]/</code></td> <td><code>false</code>，<code>-</code>在这里是普通连字符</td> <td><code>false</code></td> <td><code>true</code></td></tr> <tr><td><code>/open[-c]/</code></td> <td><code>false</code>，<code>-</code>在这里是普通连字符</td> <td><code>false</code></td> <td><code>true</code></td></tr> <tr><td><code>/open[a-1]/</code></td> <td>直接报错，<code>Uncaught SyntaxError: Invalid regular expression: /open[a-1]/: Range out of order in character class</code></td> <td>同</td> <td>同</td></tr> <tr><td><code>/open[1-c]/</code></td> <td><code>true</code>，数字到字母可以</td> <td><code>false</code></td> <td><code>false</code></td></tr></tbody></table>',1),bs=t("h3",{id:"或",tabindex:"-1"},[s("| 或 "),t("a",{class:"header-anchor",href:"#或","aria-label":'Permalink to "| 或"'},"​")],-1),Fs=t("p",null,[s("js 里常见的"),t("code",null,"||"),s("在正则里是单竖线"),t("code",null,"|"),s("。"),t("br"),s(`
写法也和 js 里差不多，每个单独的条件不需要加括号，直接可以写作`),t("code",null,"str1|str2|str3"),s("，条件里也可以加上别的特殊语法，如元字符、量词等。"),t("br"),s(`
括号一般用于不引起歧义、或者分支条件的边框。`)],-1),ys=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>app22ex</th> <th>orangex</th></tr></thead> <tbody><tr><td><code>/(app\\d{2}e|orange)x/</code></td> <td><code>true</code></td> <td><code>true</code></td></tr></tbody></table>',1),Es=t("h2",{id:"反义",tabindex:"-1"},[s("反义 "),t("a",{class:"header-anchor",href:"#反义","aria-label":'Permalink to "反义"'},"​")],-1),As=t("p",null,"有时候需要反向查找，比如除了数字以外，其他任意字符都行。",-1),Ds=t("h3",{id:"元字符反义",tabindex:"-1"},[s("元字符反义 "),t("a",{class:"header-anchor",href:"#元字符反义","aria-label":'Permalink to "元字符反义"'},"​")],-1),Cs=t("p",null,"对于上面的几个元字符，直接把小写换成大写，就是对应的反义。",-1),Ts=e('<table tabindex="0"><thead><tr><th>反义</th> <th>说明</th></tr></thead> <tbody><tr><td><code>\\W</code></td> <td>匹配<strong>任意不是</strong>字母、数字、下划线的字符</td></tr> <tr><td><code>\\S</code></td> <td>匹配<strong>任意不是</strong>空白符的字符</td></tr> <tr><td><code>\\D</code></td> <td>匹配<strong>任意不是</strong>数字的字符</td></tr> <tr><td><code>\\B</code></td> <td>匹配<strong>任意不是</strong>单词开头或结束的位置</td></tr></tbody></table>',1),ms=t("h3",{id:"反向字符集",tabindex:"-1"},[s("[^] 反向字符集 "),t("a",{class:"header-anchor",href:"#反向字符集","aria-label":'Permalink to "[^] 反向字符集"'},"​")],-1),xs=e(`<p><code>[]</code> 是字符集，里面是<strong>或</strong>的关系；<code>^</code> 匹配开头。两者结合却是反义。<br>
比如：<code>[^abc]</code> 匹配除了 abc 以外的任意字符。<br>
也可以写连字符，规则和<a href="#字符集">[] 字符集</a>一致。</p>`,1),Bs=t("br",null,null,-1),fs=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>openb</th> <th>opend</th> <th>open-</th></tr></thead> <tbody><tr><td><code>/open[^a-c]/</code></td> <td><code>false</code></td> <td><code>true</code></td> <td><code>true</code></td></tr> <tr><td><code>/open[^a-]/</code></td> <td><code>true</code>，<code>-</code>在这里是普通连字符</td> <td><code>true</code></td> <td><code>false</code></td></tr> <tr><td><code>/open[^-c]/</code></td> <td><code>true</code>，<code>-</code>在这里是普通连字符</td> <td><code>true</code></td> <td><code>false</code></td></tr> <tr><td><code>/open[^a-1]/</code></td> <td>直接报错，<code>Uncaught SyntaxError: Invalid regular expression: /open[a-1]/: Range out of order in character class</code></td> <td>同</td> <td>同</td></tr> <tr><td><code>/open[^1-c]/</code></td> <td><code>false</code>，数字到字母可以</td> <td><code>true</code></td> <td><code>true</code></td></tr></tbody></table>',1),Ss=t("h2",{id:"分组",tabindex:"-1"},[s("分组 "),t("a",{class:"header-anchor",href:"#分组","aria-label":'Permalink to "分组"'},"​")],-1),Ps=t("h3",{id:"捕获组",tabindex:"-1"},[s("() 捕获组 "),t("a",{class:"header-anchor",href:"#捕获组","aria-label":'Permalink to "() 捕获组"'},"​")],-1),qs=t("p",null,[s("匹配 exp 并记住匹配项。例如，"),t("code",null,"/(foo)/"),s("匹配并记住"),t("code",null,"foo bar"),s("中的"),t("code",null,"foo"),s("。")],-1),vs=t("blockquote",null,[t("p",null,"捕获组会带来性能损失。如果不需要收回匹配的子字符串，请选择非捕获括号。")],-1),Vs=t("p",null,[s("mdn 说捕获组会带来性能损失，但是我觉得并不会损失很多。"),t("br"),s(`
测试项目较多，且都比较重要，此节不再使用表格列出的形式测试。`)],-1),Is=t("ul",null,[t("li",null,[s("对于"),t("code",null,"exec()"),s("，"),t("strong",null,"组"),s("会体现在"),t("code",null,"exec()"),s("的结果里，数组的第"),t("code",null,"n"),s("项，就是第"),t("code",null,"n"),s("个分组。")])],-1),Ns=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;s go!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在这个示例里，第一次匹配的结果为[&quot;et&#39;&quot;,&quot;et&quot;,&quot;&#39;&quot;]，其中：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * res[0] 为匹配的结果，et&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * res[1] 为匹配到的第一个分组，也就是正则表达式里的第一组括号内的字符，et</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * res[2] 为匹配到的第二个分组，也就是正则表达式里第二组括号内的字符，&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 继续匹配，同理可得 [&quot;s &quot;, &quot;s&quot;, &quot; &quot;] 和 [&quot;go!&quot;, &quot;go&quot;, &quot;!&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1);</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>捕获组可以嵌套，对于上面的例子，<code>/([a-z]+)(\\W+)/g</code>和<code>/([a-z]+(\\W+))/g</code>是同样的结果。</p>`,2),Rs=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;1s 2go!3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 第一次匹配的结果为[&quot;et&#39;1&quot;,&quot;et&quot;,&quot;&#39;&quot;, &quot;1&quot;]，可以看到组的顺序是从左到右从外到里。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 继续匹配，同理可得 [&quot;s 2&quot;, &quot;s&quot;, &quot; &quot;, &quot;2&quot;] 和 [&quot;go!3&quot;, &quot;go&quot;, &quot;!&quot;, &quot;3&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1);</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>对于 <code>String.prototype.replace()</code>，可以直接使用<code>$n</code>来代指匹配到的组，比如<code>$1</code>就是第<code>1</code>组。</li></ul>`,2),ws=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;s go!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$1======$2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Let======&#39;s====== go======!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1======$2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一样，&quot;Let======&#39;s====== go======!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1======</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加反义符也没用，&quot;Let======\\\\&#39;s======\\\\ go======\\\\!&quot;，不过注意这里单个反义符和两个反义符的区别</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>String.prototype.replace()</code>的第二个参数还可以是一个函数，函数的返回值就是要替换的项。<br>
函数的参数是一个队列，队列的第<code>1</code>是整体匹配到的字符，第<code>n+1</code>个就是第<code>n</code>组，也就是相当于<code>...res</code>。<code>res</code>为<code>exec()</code>的结果。</p>`,2),$s=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;s go!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 打印三次，分别是：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * { a: &quot;et&#39;&quot;, b: &quot;et&quot;, c: &quot;&#39;&quot; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * { a: &quot;s &#39;&quot;, b: &quot;s&quot;, c: &quot; &quot; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * { a: &quot;go!&quot;, b: &quot;go&quot;, c: &quot;!&quot; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a, b, c })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 另外，这里也是可以写 $1 的好地方，函数里不认 $1，所以结果是：&quot;Let$1&#39;s$1 go$1!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>对于<code>String.prototype.split()</code>，如果参数是一个带捕获组的正则，那么捕获到的内容也会按组拼接到返回数组里。</li></ul>`,2),js=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;s go!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;L&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]，全匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;L&#39;, &#39;et&#39;, &#39;&#39;, &#39;s&#39;, &#39;&#39;, &#39;go&#39;, &#39;&#39;]，匹配到的结果也被塞到了数组里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pattern3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;L&#39;, &#39;et&#39;, &quot;&#39;&quot;, &#39;&#39;, &#39;s&#39;, &#39; &#39;, &#39;&#39;, &#39;go&#39;, &#39;!&#39;, &#39;&#39;]，匹配到的结果也被塞到了数组里</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="非捕获组" tabindex="-1">(?:) 非捕获组 <a class="header-anchor" href="#非捕获组" aria-label="Permalink to &quot;(?:\\) 非捕获组&quot;">​</a></h3>`,2),Ls=t("p",null,"匹配 exp，但是不记得组。",-1),zs=t("br",null,null,-1),Ws=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>Let&#39;s go!</th></tr></thead> <tbody><tr><td><code>/(?:[a-z]+)(?:\\W+)/g</code></td> <td><code>res[0]</code>为<code>et&#39;</code>，<strong>没有<code>res[1]</code>和<code>res[2]</code></strong>，继续执行，<code>res[0]</code>分别为<code>s </code>和<code>go!</code>，直到<code>null</code></td></tr></tbody></table>',1),Us=t("br",null,null,-1),Js=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>Let&#39;s go!</th></tr></thead> <tbody><tr><td><code>/(?:[a-z]+)(?:\\W+)/g</code></td> <td><code>res</code>为<code>&quot;Let======&#39;s====== go======!&quot;&#39;</code>，可以看到<code>replace()</code>中的<code>$n</code>不受影响</td></tr></tbody></table>',1),Gs=t("p",null,[s("但是"),t("code",null,"replace()"),s("的第二个参数为函数时，因为"),t("code",null,"exec()"),s("的返回并不包含组了，所以参数队列里第"),t("code",null,"2"),s("个为匹配的位置，第"),t("code",null,"3"),s("个为原始输入，之后就是"),t("code",null,"undefined"),s("了。")],-1),Os=t("h3",{id:"name-rep-具名捕获组",tabindex:"-1"},[s("(?<Name>rep) 具名捕获组 "),t("a",{class:"header-anchor",href:"#name-rep-具名捕获组","aria-label":'Permalink to "(?\\<Name>rep) 具名捕获组"'},"​")],-1),Xs=t("p",null,"可以指定组名的捕获组。",-1),Zs=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">some</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[a-z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thing</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Let&#39;s go!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 在这个示例里，第一次匹配的结果为[&quot;et&#39;&quot;,&quot;et&quot;,&quot;&#39;&quot;]，其中res.groups为 { some:&quot;et&quot;, thing:&quot;&#39;&quot; };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 可以看到，数组的返回和普通的捕获组相同，但是一直为空的 groups 变成了具名捕获的一个对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1);</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,1),Hs=t("br",null,null,-1),Ks=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>Let&#39;s go!</th></tr></thead> <tbody><tr><td><code>/(?&lt;some&gt;[a-z]+)(?&lt;thing&gt;\\W+)/g</code></td> <td><code>res</code>为<code>&quot;Let======&#39;s====== go======!&quot;&#39;</code>，可以看到<code>replace()</code>中的<code>$n</code>不受影响</td></tr></tbody></table>',1),Ms=t("p",null,[t("code",null,"replace()"),s("的第二个参数为函数时表现也和普通捕获组相同，因为"),t("code",null,"exec()"),s("的返回的数组一样。")],-1),Qs=t("h3",{id:"_1-2-引用捕获组",tabindex:"-1"},[s("\\1 \\2 引用捕获组 "),t("a",{class:"header-anchor",href:"#_1-2-引用捕获组","aria-label":'Permalink to "\\1 \\2 引用捕获组"'},"​")],-1),Ys=t("p",null,"上面说的捕获组的使用，都是在正则表达式的外部。有些时候我们需要在表达式内部去使用之前捕获的组，比如匹配 html 字符串。",-1),st=e(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> patt1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> patt1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\1</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patt1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里我们使用了懒惰匹配，所以只匹配到了 &lt;div&gt;&lt;span&gt;&lt;/span&gt; 就结束了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patt2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后面的 \\1 引用了前面括号里匹配到的 div，所以必须找到 &lt;/div&gt; 才算结束，因此结果为 &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</span></span></code></pre> <div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="零宽断言" tabindex="-1">零宽断言 <a class="header-anchor" href="#零宽断言" aria-label="Permalink to &quot;零宽断言&quot;">​</a></h2>`,2),tt=t("p",null,[t("strong",null,"zero-width assertions"),s("，这些语法像"),t("code",null,"\\b"),s("、"),t("code",null,"^"),s("、"),t("code",null,"$"),s("一样指定一个位置，位置没有宽度，所以称为"),t("strong",null,"零宽"),s("。这个位置应该满足一定的条件，所以是"),t("strong",null,"断言"),s("。")],-1),et=t("h3",{id:"与-在某些内容前或后",tabindex:"-1"},[s("(?=) 与 (?<=) 在某些内容前或后 "),t("a",{class:"header-anchor",href:"#与-在某些内容前或后","aria-label":'Permalink to "(?=) 与 (?<=) 在某些内容前或后"'},"​")],-1),it=e(`<p><code>(?=)</code>称为<strong>先行断言</strong>，<code>(?&lt;=)</code>称为<strong>后行断言</strong>。 见到的可能少，但是实际上非常常用。<br>
比如我想在一篇文章里匹配所有以<code>ing</code>结尾的单词，并提取<code>ing</code>前面的部分。<br>
结合我们之前学到的知识，我们可以用分组轻松完成：<code>/\\b(\\w+)ing\\b/g</code>，取匹配到第一组即可。<br>
现在我们不用分组，换个写法试试：<br> <code>/\\b\\w+(?=ing\\b)/g</code>，这个正则表达式，所有<strong>在<code>ing\\b</code>之前的</strong><code>\\b\\w+</code>字符，并且不包括<code>ing\\b</code>。<code>(?=exp)</code>中的<code>exp</code>就是指定这个位置的条件。</p>`,1),at=t("hr",null,null,-1),nt=t("p",null,[s("与之相反，"),t("code",null,"(?<=exp)"),s("指向在某些内容之后的条件。"),t("br"),s(`
比如：`),t("code",null,"/(?<=\\bre)\\w+\\b/g"),s("匹配所有"),t("strong",null,[s("在"),t("code",null,"\\bre"),s("之后的")]),t("code",null,"\\w+\\b"),s("字符。")],-1),dt=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>reading</th> <th>singing</th></tr></thead> <tbody><tr><td><code>/\\w+(?=ing)/</code></td> <td><code>res[0]</code>为<code>read</code></td> <td><code>res[0]</code>为<code>sing</code>，这里的匹配是贪婪的，尽可能多地匹配到了<code>sing</code></td></tr> <tr><td><code>/\\w+?(?=ing)/</code></td> <td><code>res[0]</code>为<code>read</code></td> <td><code>res[0]</code>为<code>s</code>，在前面加个<code>?</code>进行非贪婪匹配</td></tr> <tr><td><code>/(?&lt;=re)\\w+(?=ing)/</code></td> <td><code>res[0]</code>为<code>ad</code></td> <td><code>null</code></td></tr></tbody></table>',1),lt=t("h3",{id:"与-不在某些内容前或后",tabindex:"-1"},[s("(?!) 与 (?<!) 不在某些内容前或后 "),t("a",{class:"header-anchor",href:"#与-不在某些内容前或后","aria-label":'Permalink to "(?!) 与 (?<!) 不在某些内容前或后"'},"​")],-1),ht=e(`<p><code>(?!)</code>称为<strong>先行否定断言</strong>，<code>(?&lt;!)</code>称为<strong>后行否定断言</strong>。<br>
和前面一组相反，前面的两个匹配在 xxx 之前或之后，这两个匹配不在 xxx 之前或之后。<br>
比如：匹配小数点后的部分：<code>/\\d+(?!\\.)/</code>匹配<code>3.14</code>的结果就是<code>14</code>，因为<code>3</code>在<code>.</code>前面。</p>`,1),ot=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>13.24</th></tr></thead> <tbody><tr><td><code>/\\d+(?!\\d*\\.)/g</code></td> <td><code>res[0]</code>为<code>14</code>，上面的例子小数点前只能匹配一位数字，这个写法可以匹配多个</td></tr></tbody></table>',1),rt=e('<table tabindex="0"><thead><tr><th>测试结果</th> <th>rgba(11,222,3, 0.4)</th></tr></thead> <tbody><tr><td><code>/[\\d\\.]+(?!\\d*,)/g</code></td> <td><code>res[0]</code>为<code>0.4</code>，匹配rgba中的透明度</td></tr></tbody></table>',1);function pt(ct,kt,_t,gt,ut,bt){const l=d("RegExpTest"),a=d("PartTitle");return r(),o("div",null,[c,s(),t("div",null,[i(l)]),s(),k,s(),_,s(),g,s(),u,s(),i(a,{type:"test"},{default:n(()=>[s("使用正则表达式不断 exec() 字符串，记 exec() 的结果为 res。")]),_:1}),b,s(),F,s(),y,s(),i(a,{type:"test"},{default:n(()=>[s("exec()。")]),_:1}),E,s(),A,s(),D,s(),i(a,{type:"test"},{default:n(()=>[s("使用正则表达式不断 exec() 字符串，记 exec() 的结果为 res。")]),_:1}),C,s(),T,s(),m,s(),x,s(),B,s(),f,s(),S,s(),P,s(),q,s(),v,s(),V,s(),I,s(),N,s(),i(a,{type:"test"},{default:n(()=>[s("test()。")]),_:1}),R,s(),w,s(),$,s(),i(a,{type:"test"},{default:n(()=>[s("test()。")]),_:1}),j,s(),L,s(),z,s(),i(a,{type:"test"},{default:n(()=>[s("test()。")]),_:1}),W,s(),U,s(),J,s(),G,s(),O,s(),X,s(),Z,s(),H,s(),i(a,{type:"test"},{default:n(()=>[s("exec()，记 exec() 的结果为 res。")]),_:1}),K,s(),M,s(),Q,s(),Y,s(),ss,s(),ts,s(),es,s(),is,s(),i(a,{type:"test",style:{"margin-top":"12px"}},{default:n(()=>[s("这几个都很好理解，索性都放一起测试了。"),as,s("exec()，记 exec() 的结果为 res。")]),_:1}),ns,s(),ds,s(),ls,s(),hs,s(),i(a,{type:"test"},{default:n(()=>[s("exec()，记 exec() 的结果为 res。")]),_:1}),os,s(),rs,s(),ps,s(),cs,s(),ks,s(),i(a,{type:"test"},{default:n(()=>[s("exec()，记 exec() 的结果为 res。")]),_:1}),_s,s(),i(a,{type:"test"},{default:n(()=>[s("专门测试连字符 -。"),gs,s("test()。")]),_:1}),us,s(),bs,s(),Fs,s(),i(a,{type:"test"},{default:n(()=>[s("test()。")]),_:1}),ys,s(),Es,s(),As,s(),Ds,s(),Cs,s(),Ts,s(),ms,s(),xs,s(),i(a,{type:"test"},{default:n(()=>[s("专门测试连字符 -。可以看到结果正好和“[] 字符集”相反。"),Bs,s("test()。")]),_:1}),fs,s(),Ss,s(),Ps,s(),qs,s(),vs,s(),Vs,s(),Is,s(),Ns,s(),Rs,s(),ws,s(),$s,s(),js,s(),Ls,s(),i(a,{type:"test"},{default:n(()=>[s("使用 () 捕获组 中的例子。"),zs,s("exec()，记 exec() 的结果为 res")]),_:1}),Ws,s(),i(a,{type:"test"},{default:n(()=>[s("使用 () 捕获组 中的例子。"),Us,s("replace(reg, '$1======$2')，记 replace() 的结果为 res")]),_:1}),Js,s(),Gs,s(),Os,s(),Xs,s(),Zs,i(a,{type:"test"},{default:n(()=>[s("使用 () 捕获组 中的例子。"),Hs,s("replace(reg, '$1======$2')，记 replace() 的结果为 res")]),_:1}),Ks,s(),Ms,s(),Qs,s(),Ys,s(),st,s(),tt,s(),et,s(),it,s(),at,s(),nt,s(),i(a,{type:"test"},{default:n(()=>[s("exec()，记 exec() 的结果为 res")]),_:1}),dt,s(),lt,s(),ht,s(),i(a,{type:"test"},{default:n(()=>[s("exec()，记 exec() 的结果为 res")]),_:1}),ot,s(),rt])}const Et=h(p,[["render",pt]]);export{yt as __pageData,Et as default};
