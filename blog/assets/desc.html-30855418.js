import{_ as n,M as t,p as h,q as d,R as a,t as e,N as s,a1 as c}from"./framework-125c10c9.js";const i={},o=a("h1",{id:"介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),e(" 介绍")],-1),l={href:"https://git.ifengidc.com/whale/lowcode/library/basic",target:"_blank",rel:"noopener noreferrer"},p=c('<h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h2><p>可以把物料分为以下几个类型。</p><h4 id="业务组件" tabindex="-1"><a class="header-anchor" href="#业务组件" aria-hidden="true">#</a> 业务组件</h4><p>真正被使用的组件，比如新闻列表、轮播图等等。</p><h4 id="布局组件" tabindex="-1"><a class="header-anchor" href="#布局组件" aria-hidden="true">#</a> 布局组件</h4><p>用于设置结构的组件，组件内部可以填入业务组件或其他容器组件。</p><h4 id="区块" tabindex="-1"><a class="header-anchor" href="#区块" aria-hidden="true">#</a> 区块</h4><p>通过低代码搭建的方式，将一系列业务组件、布局组件进行嵌套组合而成，不对外提供可配置的属性。<br> 目标是<strong>用户可自行组合区块</strong>，保存到个人的收藏中。</p><h4 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h4><p>特定的初始化的页面，由区块、业务组件和布局组件组成。</p><h2 id="物料中的网络请求" tabindex="-1"><a class="header-anchor" href="#物料中的网络请求" aria-hidden="true">#</a> 物料中的网络请求</h2><p>物料的渲染依赖于 schema 中的数据，而 schema 变化时，组件也会重新渲染。<br> 如果组件内使用了网络请求，不管是多快的网络请求，在频繁变更的 schema 面前都是<strong>慢</strong>。</p><p>所以请求之后，可以把数据存放在全局变量里。而在请求之间，从全局变量里查询有没有已有数据，有就直接用，没有就再次请求。这样可以很明显地节省时间。</p>',13);function _(f,b){const r=t("ExternalLinkIcon");return h(),d("div",null,[o,a("p",null,[e("目前我们只有一个物料库："),a("a",l,[e("basic"),s(r)]),e("。")]),p])}const x=n(i,[["render",_],["__file","desc.html.vue"]]);export{x as default};
