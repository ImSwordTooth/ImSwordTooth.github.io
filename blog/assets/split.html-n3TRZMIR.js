import{_ as d,r as l,o as c,c as a,a as e,b as t,e as o,d as s}from"./app-hBvoMyXQ.js";const i={},h=e("h1",{id:"设计图裁剪工具-split",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设计图裁剪工具-split","aria-hidden":"true"},"#"),t(" 设计图裁剪工具 - split")],-1),_=e("strong",null,"精心制作的玩具项目。",-1),u={href:"https://github.com/ImSwordTooth/split",target:"_blank",rel:"noopener noreferrer"},p=s('<p>以设计图为背景，在上层手动绘制出矩形，矩形可嵌套。矩形就是组件的抽象，矩形的嵌套关系就是组件的嵌套关系。<br> 每个组件还可以设置<code>propTypes</code>、预引入的组件、埋点信息、碎片等。<br> 设置完毕后可生成为本地文件，直接初始化一个具备完整结构的<code>React</code>或<code>Vue</code>项目。 <img src="https://i0.letvimg.com/lc15_lemf/202311/28/10/32/Snipaste_2023-11-28_10-17-50.png" alt=""></p><h3 id="技术栈" tabindex="-1"><a class="header-anchor" href="#技术栈" aria-hidden="true">#</a> 技术栈</h3>',2),m=e("thead",null,[e("tr",null,[e("th",null,"类型"),e("th",null,"说明")])],-1),b=e("tr",null,[e("td",null,"框架"),e("td",null,[t("React（Class写法，为了兼容 "),e("code",null,"pixi.js"),t("）")])],-1),f=e("td",null,"CSS",-1),x={href:"https://styled-components.com/",target:"_blank",rel:"noopener noreferrer"},g=e("tr",null,[e("td",null,"构建工具"),e("td",null,"webpack")],-1),k=e("td",null,"重要依赖",-1),w={href:"https://pixijs.com/",target:"_blank",rel:"noopener noreferrer"},v=e("h3",{id:"画布部分",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#画布部分","aria-hidden":"true"},"#"),t(" 画布部分")],-1),y=e("p",null,[t("画布是本项目最重要核心的部分，由 2D WebGL 渲染引擎"),e("code",null,"pixi.js"),t("完成。"),e("br"),t(" 虽说是用了第三方库，但是图形绘制和操作的逻辑也没有很少。")],-1),j=e("h4",{id:"绘制矩形",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#绘制矩形","aria-hidden":"true"},"#"),t(" 绘制矩形")],-1),S=e("p",null,"绘制矩形时要考虑以下情况：",-1),V=e("li",null,"从上往下从左往右只是一般情况，很有可能是反向绘制",-1),N=e("li",null,[t("鼠标按下时进行"),e("code",null,"hittest"),t("，如果没有命中，就在最外层容器绘制，如果命中，就在命中的矩形里绘制，形成嵌套关系")],-1),B={href:"https://www.npmjs.com/package/randomcolor",target:"_blank",rel:"noopener noreferrer"},C=e("li",null,"画布可能被手动移动、缩放等",-1),E=e("li",null,"如果只移动了很短的距离，不会创建",-1),I=s('<h4 id="绘制与操作顶点" tabindex="-1"><a class="header-anchor" href="#绘制与操作顶点" aria-hidden="true">#</a> 绘制与操作顶点</h4><p>选中矩形时，根据矩形顶点绘制出四个圆形。<br> 每个圆形都添加<code>mousedown</code>、<code>mouseover</code>、<code>mouseup</code>事件以控制矩形的尺寸。<br><code>mouseover</code>时实时修改矩形尺寸，<code>x</code> 和 <code>y</code> 值最小的为矩形左上角，取其对角点，可获取矩形宽度和高度。</p>',2);function L(T,O){const n=l("ExternalLinkIcon"),r=l("Outlink");return c(),a("div",null,[h,e("p",null,[_,t(),e("a",u,[t("github 地址"),o(n)]),t("。")]),o(r,{url:"https://imswordtooth.github.io/split",text:"点我去体验",style:{"font-size":"32px"}}),p,e("table",null,[m,e("tbody",null,[b,e("tr",null,[f,e("td",null,[e("a",x,[t("styled-components"),o(n)])])]),g,e("tr",null,[k,e("td",null,[e("a",w,[t("pixi.js"),o(n)])])])])]),v,y,j,S,e("ul",null,[V,N,e("li",null,[t("每次绘制时重新生成一个随机色，如果是嵌套的矩形，就使用父矩形的系列颜色的随机色（使用了"),e("a",B,[t("randomcolor"),o(n)]),t("）")]),C,E]),I])}const z=d(i,[["render",L],["__file","split.html.vue"]]);export{z as default};
